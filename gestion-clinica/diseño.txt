=============================
DISEÑO GENERAL DEL SISTEMA
=============================

El sistema de gestión para la clínica está implementado utilizando programación orientada a objetos. El modelo principal está compuesto por las clases: Paciente, Medico, Especialidad, Turno, Receta, HistoriaClinica y Clinica. Cada clase encapsula sus atributos y responsabilidades.

La clase Clinica centraliza la gestión de pacientes, médicos, turnos, recetas e historias clínicas, y es responsable de las validaciones de negocio y del lanzamiento de excepciones personalizadas.

La interfaz de usuario es una CLI (interfaz de consola) que permite interactuar con el sistema mostrando un menú y solicitando los datos necesarios para cada operación. La CLI se encarga de la interacción y el manejo de errores, delegando la lógica al modelo.

El sistema incluye pruebas unitarias con unittest que validan los casos principales y los errores esperados.

-------------------------------
PRINCIPIOS DE DISEÑO APLICADOS
-------------------------------

- Programación orientada a objetos: cada entidad del dominio es una clase con atributos y métodos propios.
- Encapsulamiento: los datos sensibles están protegidos mediante atributos privados y se accede a ellos mediante métodos públicos.
- Responsabilidad única: cada clase tiene una responsabilidad clara.
- Validación desde el modelo: todas las validaciones y reglas de negocio se implementan en el modelo.

----------------------
VENTAJAS DEL DISEÑO
----------------------

- Separación de responsabilidades entre modelo y CLI.
- Integridad de los datos mediante atributos privados.
- Estructura modular que facilita el mantenimiento y la extensión.
- Pruebas unitarias que aseguran el correcto funcionamiento del modelo.

-----------------
FLUJO DE USO
-----------------

1. Al ejecutar la aplicación(desde main.py), se muestra un menú interactivo en consola con las operaciones principales de la clínica.
2. El usuario selecciona una opción, ingresa los datos solicitados y el sistema responde mostrando el resultado o un mensaje de error.
3. El menú se repite hasta que el usuario elige salir.

-------------------------------
INSTRUCCIONES DE EJECUCIÓN
-------------------------------

Para ejecutar la aplicación interactiva:
1. Abrir una terminal en la carpeta principal del proyecto.
2. Ejecutar:
   python gestion-clinica/main.py

Para ejecutar todos los tests:
1. Abrir una terminal en la carpeta principal del proyecto.
2. Ejecutar:
   python -m unittest discover gestion-clinica/tests

Para ejecutar un test individual (ejemplo):
   python -m unittest gestion-clinica.tests.test_clinica.TestClinica.test_emitir_receta